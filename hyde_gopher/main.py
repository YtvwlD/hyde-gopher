from bs4 import BeautifulSoup
from flask import Flask, url_for
from flask_gopher import GopherExtension, GopherRequestHandler
from hyde.model import Config
from hyde.template import Template
from hyde.site import Site
from os import environ
from . import _version

app = Flask(__name__)
gopher = GopherExtension(app)


def index():
    entries = [
        gopher.menu.dir(entry.name, entry.url)
        for entry in site.config.context.data.menu
    ]
    entries.insert(0, gopher.menu.title('Homepage'))
    entries.append(gopher.menu.info(f"Generated by hyde-gopher {_version}."))
    return gopher.render_menu(*entries)


def handle_node(node):
    if node.url == '/':
        return index()
    entries = [
        gopher.menu.dir(node.name, node.url)
        for node in node.child_nodes
    ]
    entries.insert(0, gopher.menu.title(node.name))
    entries.insert(1, gopher.menu.dir("..", node.parent.url))
    entries += [
        gopher.menu.dir(resource.name, resource.url)
        for resource in node.resources
    ]
    entries.append(gopher.menu.info(f"Generated by hyde-gopher {_version}."))
    return gopher.render_menu(*entries)


def handle_resource(resource):
    html = templates.render_resource(resource, site.context)
    soup = BeautifulSoup(html)
    entries = list()
    for line in soup.text.splitlines():
        while len(line) >= 70:
            entries.append(line[:70])
            line = line[70:]
        else:
            entries.append(line)
    return gopher.render_menu(*entries)


def load_hyde_config(sitepath):
    config = Config(sitepath, config_file="site.yaml")
    return Site(sitepath, config)


def run():
    global site, templates
    site = load_hyde_config(environ["SITE_PATH"])
    templates = Template.find_template(site)
    templates.configure(site)
    macros = templates.loader.load(templates.env, "macros.j2")
    templates.env.globals.update(macros.module.__dict__)
    stack = list()
    site.content.load()
    stack.append(site.content)
    while stack:
        current = stack.pop()
        app.add_url_rule(
            current.url, current.relative_path,
            lambda c=current: handle_node(c)
        )
        for child in current.resources:
            app.add_url_rule(
                child.url, child.relative_path,
                lambda c=child: handle_resource(c)
            )
        for child in current.child_nodes:
            stack.append(child)
    app.run('::', 7070, request_handler=GopherRequestHandler)
