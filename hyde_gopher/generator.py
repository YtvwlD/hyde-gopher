from collections import namedtuple
from pathlib import Path
from urllib.parse import urljoin, urlparse
from commando.util import getLoggerWithConsoleHandler
from bs4 import BeautifulSoup
from flask_gopher import GopherMenu, GopherExtension
from hyde.plugin import Plugin
from hyde.template import Template
from . import _version

logger = getLoggerWithConsoleHandler(__name__)

gopher = GopherExtension()
gopher.width = 70
gopher_menu = None


def index(site):
    entries = [
        gopher_menu().dir(
            entry.name, urljoin(site.config.base_path, entry.url)
        )
        for entry in site.config.context.data.menu
    ]
    entries.insert(0, gopher_menu().title('Homepage'))
    entries.append(gopher_menu().info(f"Generated by hyde-gopher {_version}."))
    return gopher.render_menu(*entries)


def generate_node(site, events, node):
    logger.debug(f"Generating for {node.relative_path}...")
    events.begin_node(node)
    if node.url == '/':
        content = index(site)
    else:
        entries = [
            gopher_menu().dir(
                node.name, urljoin(site.config.base_path, node.url)
            )
            for node in node.child_nodes
        ]
        entries.insert(0, gopher_menu().title(node.name))
        entries.insert(1, gopher_menu().dir(
            "..", urljoin(site.config.base_path, node.parent.url)
        ))
        entries += [
            gopher_menu().dir(
                resource.name, urljoin(site.config.base_path, resource.url)
            )
            for resource in node.resources
        ]
        entries.append(gopher_menu().info(f"Generated by hyde-gopher {_version}."))
        content = gopher.render_menu(*entries)
    folder = Path(site.config.deploy_root) / node.relative_path
    if not folder.exists():
        folder.mkdir()
    (folder / "gophermap").write_text(content)
    events.node_complete(node)
    return content


def generate_resource(site, events, templates, resource):
    if not resource.name.endswith(".html"):
        return gopher.render_menu(
            gopher_menu().info("Not yet supported, sorry.")
        )  # TODO
    logger.debug(f"Generating for {resource.relative_path}...")
    html = templates.render_resource(resource, site.context)
    # TODO: also support plain text
    soup = BeautifulSoup(html)
    entries = list()
    for line in soup.text.splitlines():
        while len(line) >= 70:
            entries.append(gopher_menu().info(line[:70]))
            line = line[70:]
        else:
            entries.append(gopher_menu().info(line))
    content = gopher.render_menu(*entries)
    (
        Path(site.config.deploy_root) / resource.relative_path
    ).write_text(content)
    return content


GeneratorProxy = namedtuple(
    "GeneratorProxy",
    ["preprocessor", "postprocessor", "context_for_path"]
)


def initialize(site):
    plugins = Plugin(site)
    plugins.load_all(site)
    events = Plugin.get_proxy(site)
    generator_proxy = GeneratorProxy(
        context_for_path=None,
        preprocessor=events.begin_text_resource,
        postprocessor=events.text_resource_complete,
    )
    templates = Template.find_template(site)
    templates.configure(site, engine=generator_proxy)
    events.template_loaded(templates)
    site.content.load()
    events.begin_generation()
    events.begin_site()
    return events, templates


def generate_all(site):
    global gopher_menu
    base_url = urlparse(site.config.gopher_base_url)
    site.config.base_path = base_url.path
    gopher_menu = lambda: GopherMenu(base_url.hostname, base_url.port or 70)
    events, templates = initialize(site)
    stack = list()
    stack.append(site.content)
    while stack:
        current = stack.pop()
        if current.name == "tags":
            continue  # TODO
        generate_node(site, events, current)
        for child in current.resources:
            generate_resource(site, events, templates, child)
        for child in current.child_nodes:
            stack.append(child)
    events.site_complete()
    events.generation_complete()
