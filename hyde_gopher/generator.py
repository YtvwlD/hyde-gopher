from collections import namedtuple
from pathlib import Path
from urllib.parse import urljoin, urlparse
from commando.util import getLoggerWithConsoleHandler
from bs4 import BeautifulSoup
from flask_gopher import GopherMenu, GopherExtension
from hyde.plugin import Plugin
from hyde.template import Template
from . import _version

logger = getLoggerWithConsoleHandler(__name__)


class Generator:
    """
    The main generator class.
    
    This mostly holds state, for now.
    """
    
    def __init__(self, site, gopher, gopher_menu):
        self.site = site
        self.gopher = gopher
        self.gopher_menu = gopher_menu
        plugins = Plugin(site)
        plugins.load_all(site)
        self.events = Plugin.get_proxy(site)
        generator_proxy = GeneratorProxy(
            context_for_path=None,
            preprocessor=self.events.begin_text_resource,
            postprocessor=self.events.text_resource_complete,
        )
        self.templates = Template.find_template(site)
        self.templates.configure(self.site, engine=generator_proxy)
        self.events.template_loaded(self.templates)
        self.site.content.load()
        self.events.begin_generation()
        self.events.begin_site()

    def index(self):
        entries = [
            self.gopher_menu.dir(
                entry.name, urljoin(self.site.config.base_path, entry.url)
            )
            for entry in self.site.config.context.data.menu
        ]
        entries.insert(0, self.gopher_menu.title('Homepage'))
        entries.append(self.gopher_menu.info(f"Generated by hyde-gopher {_version}."))
        return self.gopher.render_menu(*entries)

    def generate_node(self, node):
        logger.debug(f"Generating for {node.relative_path}...")
        self.events.begin_node(node)
        if node.url == '/':
            content = self.index()
        else:
            entries = [
                self.gopher_menu.dir(
                    node.name, urljoin(self.site.config.base_path, node.url)
                )
                for node in node.child_nodes
            ]
            entries.insert(0, self.gopher_menu.title(node.name))
            entries.insert(1, self.gopher_menu.dir(
                "..", urljoin(self.site.config.base_path, node.parent.url)
            ))
            entries += [
                self.gopher_menu.dir(
                    resource.name, urljoin(self.site.config.base_path, resource.url)
                )
                for resource in node.resources
            ]
            entries.append(self.gopher_menu.info(f"Generated by hyde-gopher {_version}."))
            content = self.gopher.render_menu(*entries)
        folder = Path(self.site.config.deploy_root) / node.relative_path
        if not folder.exists():
            folder.mkdir()
        (folder / "gophermap").write_text(content)
        self.events.node_complete(node)
        return content

    def generate_resource(self, resource):
        if not resource.name.endswith(".html"):
            return self.gopher.render_menu(
                self.gopher_menu.info("Not yet supported, sorry.")
            )  # TODO
        logger.debug(f"Generating for {resource.relative_path}...")
        html = self.templates.render_resource(resource, self.site.context)
        # TODO: also support plain text
        soup = BeautifulSoup(html)
        entries = list()
        for line in soup.text.splitlines():
            while len(line) >= 70:
                entries.append(self.gopher_menu.info(line[:70]))
                line = line[70:]
            else:
                entries.append(self.gopher_menu.info(line))
        content = self.gopher.render_menu(*entries)
        (
            Path(self.site.config.deploy_root) / resource.relative_path
        ).write_text(content)
        return content


GeneratorProxy = namedtuple(
    "GeneratorProxy",
    ["preprocessor", "postprocessor", "context_for_path"]
)


def generate_all(site):
    base_url = urlparse(site.config.gopher_base_url)
    site.config.base_path = base_url.path
    gopher = GopherExtension()
    gopher.width = 70
    gopher_menu = GopherMenu(base_url.hostname, base_url.port or 70)
    generator = Generator(site, gopher, gopher_menu)
    stack = list()
    stack.append(site.content)
    while stack:
        current = stack.pop()
        if current.name == "tags":
            continue  # TODO
        generator.generate_node(current)
        for child in current.resources:
            generator.generate_resource(child)
        for child in current.child_nodes:
            stack.append(child)
    generator.events.site_complete()
    generator.events.generation_complete()
