from pathlib import Path
from commando.util import getLoggerWithConsoleHandler
from bs4 import BeautifulSoup
from flask_gopher import GopherMenu, GopherExtension
from hyde.template import Template
from . import _version

logger = getLoggerWithConsoleHandler(__name__)

gopher = GopherExtension()
gopher.width = 70
gopher_menu = lambda: GopherMenu()  # TODO


def index(site):
    entries = [
        gopher_menu().dir(entry.name, entry.url)
        for entry in site.config.context.data.menu
    ]
    entries.insert(0, gopher_menu().title('Homepage'))
    entries.append(gopher_menu().info(f"Generated by hyde-gopher {_version}."))
    return gopher.render_menu(*entries)


def generate_node(site, node):
    logger.debug(f"Generating for {node.relative_path}...")
    if node.url == '/':
        content = index(site)
    else:
        entries = [
            gopher_menu().dir(node.name, node.url)
            for node in node.child_nodes
        ]
        entries.insert(0, gopher_menu().title(node.name))
        entries.insert(1, gopher_menu().dir("..", node.parent.url))
        entries += [
            gopher_menu().dir(resource.name, resource.url)
            for resource in node.resources
        ]
        entries.append(gopher_menu().info(f"Generated by hyde-gopher {_version}."))
        content = gopher.render_menu(*entries)
    (
        Path(site.config.deploy_root) / node.relative_path / "index.gopher"
    ).write_text(content)
    return content


def generate_resource(site, templates, resource):
    if not resource.name.endswith(".html"):
        return gopher.render_menu(
            gopher_menu().info("Not yet supported, sorry.")
        )  # TODO
    logger.debug(f"Generating for {resource.relative_path}...")
    html = templates.render_resource(resource, site.context)
    soup = BeautifulSoup(html)
    entries = list()
    for line in soup.text.splitlines():
        while len(line) >= 70:
            entries.append(gopher_menu().info(line[:70]))
            line = line[70:]
        else:
            entries.append(gopher_menu().info(line))
    content = gopher.render_menu(*entries)
    (
        Path(site.config.deploy_root) / resource.relative_path
    ).write_text(content)
    return content


def generate_all(site):
    templates = Template.find_template(site)
    templates.configure(site)
    macros = templates.loader.load(templates.env, "macros.j2")
    templates.env.globals.update(macros.module.__dict__)
    stack = list()
    site.content.load()
    stack.append(site.content)
    while stack:
        current = stack.pop()
        if current.name == "tags":
            continue  # TODO
        generate_node(site, current)
        for child in current.resources:
            generate_resource(site, templates, child)
        for child in current.child_nodes:
            stack.append(child)
